#!/bin/bash

# create a directory structure
mkd() {
  mkdir -p "$@"
}

# create a directory structure and enter it
mkdc() {
  mkdir -p "$@" && cd "$@"
}

# determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# use gitâ€™s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	diff() {
		git diff --no-index --color-words "$@"
	}
fi

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
	tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

# get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
		LESS_TERMCAP_md=$(printf "\e[1;31m") \
		LESS_TERMCAP_me=$(printf "\e[0m") \
		LESS_TERMCAP_se=$(printf "\e[0m") \
		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
		LESS_TERMCAP_ue=$(printf "\e[0m") \
		LESS_TERMCAP_us=$(printf "\e[1;32m") \
		man "$@"
}

# go to a folder easily in your gopath
gogo(){
	local d=$1

	if [[ -z $d ]]; then
		echo "You need to specify a project name."
		return 1
	fi

	if [[ "$d" = github* ]]; then
		d=$(echo $d | sed 's/.*\///')
	fi
	d=${d%/}

	# search for the project dir in the GOPATH
	local path=( `find "${GOPATH}/src" \( -type d -o -type l \) -iname "$d"  | awk '{print length, $0;}' | sort -n | awk '{print $2}'` )

	if [ "$path" == "" ] || [ "${path[*]}" == "" ]; then
		echo "Could not find a directory named $d in $GOPATH"
		echo "Maybe you need to 'go get' it ;)"
		return 1
	fi

	# enter the first path found
	cd "${path[0]}"
}

# list go deps for a particular project
golistdeps(){
	(
	gogo $@

	go list -e -f '{{join .Deps "\n"}}' ./... | xargs go list -e -f '{{if not .Standard}}{{.ImportPath}}{{end}}'
	)
}

#
# ssh to a vagrant machine using a name
#
vssh() {
	local machine_name=$1
	local vagrant_cmd=$(which vagrant)

	if [[ -z $machine_name ]];
	then
		echo "machine name not specified"
		return 1
	fi

	$vagrant_cmd ssh `$vagrant_cmd global-status | grep $machine_name | awk '{ print $1}'`
}

#
# cd to a vagrant machine dir
#
vgo() {
	local machine_name=$1
	local vagrant_cmd=$(which vagrant)

	if [[ -z $machine_name ]];
	then
		echo "machine name not specified"
		return 1
	fi

	cd `$vagrant_cmd global-status | grep $machine_name | awk '{ print $5 }'`
}
